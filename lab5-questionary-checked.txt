=== This template file contains questions you need to answer.
=== Fill your answers on appropriate blank lines only.
=== Don't start any line with three equal signs "===".
=== Don't edit any lines starting from three equal signs.
=== Use C notation to write numbers: 42 for decimal, 0x2a for hexadecimal.
=== We may check most of the answers automatically, so "forty two" or
=== "26+16" won't work for this example. Spaces are mostly ignored, so
=== "  42  " is OK (without quotes of course). 
=== When asked to specify address & instruction, do it in the form of
=== gdb output "ADDRESS: INSTRUCTION", for example "0x7c26:  or  $0x1,%eax"
=== Don't make lines longer than 80 characters. You don't need to fit your
=== answer in a single line, you can start a new line at will.
=== However, when asked to fill "a table" make each table raw a single line.

=== Q Did you have to do anything else to ensure that the I/O
===   privilege setting is saved and restored properly when you
===   subsequently switch from one environment to another? Why? 
===   (free form)
	No, because this service is provided by the OS context switching mechanism.
	Context switching mechanism saves and restores register values with no possibility
	for 'leakage' between user-space environments.
	As IO privileges are encoded by a bit flag in a (special) register,
	and JOS file system	server being a normal user-space environment -
	scheduling it, OS merely exercises its normal behavior.

=== Q How long approximately did it take you to do this lab?
===   (number of hours for all partners combined)
	As any reasonable student I needed all the time there was, and even
	little more  :)

=== Q We simplified the file system this year with the goal of making
===   more time for the final project. Do you feel like you gained a
===   basic understanding of the file I/O in JOS? Feel free to suggest
===   things we could improve. 
===   (free form)
	Implementing the challenge I have crawled through pretty much all
	the file system code.
	...
	I think the same _total_ amount of work could be divided more evenly
	between the labs.

====================================================================
=== Q What challenge(s) have you chosen to implement? (specify
===   challenge numbers separated by spaces, if more than one)
	Challenge 1: write access to JOS file system

=== Q If the challenge requires changing the kernel source, list the
===   files which you have changed/added during implementation.
===   (one file per line, relative to lab directory containing .git/)
	fs/bc.c
	fs/fs.c
	fs/serv.c
	lib/file.c

=== Q Describe you solution.
===   (free form, up to 500 words, don't need to use all 500!)
	Example usage could look like this:
	Run JOS shell ...
	    $ cat lorem
	    Lorem ipsum dolor ...
	    $ echo hello > lorem
	    $ cat lorem
	    hello
	Kill, and restart QEMU ...
	    $ cat lorem
	    hello
	    $ echo good bye cruel world > lorem
	    $ cat lorem
	    good bye cruel world
	
	Limitations (mainly due to shortage in time):
	- unable to create new / remove existing files - deal only with existing files
	- very basic block cache management policy - flush everything upon file closing.
	  At the same time, unmap every page caching a block being flushed (or freed).


DryScore: 10
WetScore: 90/90
LatePenalty:  -5
Total:  95/100

